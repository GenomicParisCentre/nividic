<?xml version="1.0" encoding="latin1"?>
<!--
/*
 *                      Nividic development code
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU Lesser General Public Licence.  This should
 * be distributed with the code.  If you do not have a copy,
 * see:
 *
 *      http://www.gnu.org/copyleft/lesser.html
 *
 * Copyright for this code is held jointly by the microarray platform
 * of the École Normale Supérieure and the individual authors.
 * These should be listed in @author doc comments.
 *
 * For more information on the Nividic project and its aims,
 * or to join the Nividic mailing list, visit the home page
 * at:
 *
 *      http://www.transcriptome.ens.fr/nividic
 *
 */
 -->
 
<document>

  <properties> 
    <author email="jourdren@biologie.ens.fr">Laurent Jourdren</author> 
    <title>BioAssay tutorial</title> 
  </properties> 

  <body>
  
  <section name="Creating and handling a BioAssay Object">

    <p>The BioAssay object is one of the main object of the Nividic API. BioAssay objects can handle data like Genepix GPR files or Genepix GAL files</p>
   
    <subsection name="Creating a BioAssay object">

   
      <p>Nividic use the factory design pattern paradigm, so you can create a BioAssay object simple using : </p>
   
      <source>
      import fr.ens.transcriptome.nividic.om.BioAssay;
      import fr.ens.transcriptome.nividic.om.BioAssayFactory;


      public class BioAssayDemo {
   
       private BioAssay b = BioAssayFactory.createBioAssay();
  
      }
      </source>
   
      <p>If you interface your application directly in Axon Genepix, you must use a html document with specific javascript method and use the other createBioAssay method from BioAssayFactory :</p>
   
   
      <source>
      import javax.swing.JApplet;

      public class NividicDemoApplet extends JApplet {

  
        public void init() {

          BioAssay b = BioAssayFactory.createBioAssay(this); 
        }
     
      }   
      </source>
   
    </subsection>
       
    <subsection name="Basic management of fields">

   
      <p>The BioAssay objects organize information like a spreadsheet : with column and rows. All row have a name and a type. There are 3 types : integer (BioAssay.DATATYPE_INTEGER), double (BioAssay.DATATYPE_DOUBLE) and String (BioAssay.DATATYPE_STRING). You can get all fields names : </p>
   
      <source>
      b.getFields();
      </source>
   
      <p>Remove a field :</p>
      
      <source>
      b.removeField("red");
      </source>
      
      <p>and get the type of  the field (returns an integer corresponding to BioAssay.DATATYPE_XXX):</p>
      
      <source>
      b.getFieldType("red");
      </source>
      
      
      <p>You can get an array of the value within the field with following methods (one method per data type):</p>
      
      <source>
      b.getDataFieldDouble("ratio")
      b.getDataFieldInt("red");
      b.getDataFieldString("id");
      </source>
      
      
      <p>and set the values (also one method per data type). Warning if the size of your array is not equals to the size of the BioAssay object, a runtime exception (BioAssayRuntimeException) will be throws:</p>
      
      <source>
      b.setDataFieldDouble("ratio", new double[100]);
      b.setDataFieldInt("red", new int[100]);
      b.setDataFieldString("id", new String[100]);
      </source>
   
    </subsection>
    
    <subsection name="Shortcuts provided by BioAssay">

      
      <p>The BioAssay interface extends BioAssayBase (all previous methods discribed come from BioAssayBase) with shortcuts for communs fields:</p>
 
      <source>
      // Test if XXX field exits.
      isXXXs();     
      // Get the XXX data.
      getXXXs();  
      // Set the XXX data.  
      setXXXs();    
      // Remove the XXX field.
      removeXXXs(); 
      </source>
      
      <p>You can replace XXX with the following values:</p>
      
      <table><title/>
        <tr><th>Field Name</th><th>const name</th><th>BioAssayBase field name</th><th>Description</th></tr>
            <tr>
              <td>red</td>
              <td>FIELD_NAME_RED</td>
              <td>red</td>
              <td>red data</td>
            </tr>
            <tr>
              <td>green</td>
              <td>FIELD_NAME_GREEN</td>
              <td>green</td>
              <td>green data</td>
            </tr>
            <tr>
              <td>flags</td>
              <td>FIELD_NAME_FLAG</td>
              <td>flags</td>
              <td>flags data</td>
            </tr>
            <tr>
              <td>id</td>
              <td>FIELD_NAME_ID</td>
              <td>id</td>
              <td>name data</td>
            </tr>
            <tr>
              <td>ratio</td>
              <td>FIELD_NAME_RATIO</td>
              <td>ratio</td>
              <td>ratio data</td>
            </tr>
            <tr>
              <td>bright</td>
              <td>FIELD_NAME_BRIGHT</td>
              <td>bright</td>
              <td>bright data</td>
            </tr>
            <tr>
              <td>description</td>
              <td>FIELD_NAME_DESCRIPTION</td>
              <td>description</td>
              <td>description data</td>
            </tr>
            <tr>
              <td>a</td> 
              <td>FIELD_NAME_A</td>
              <td>a</td>
              <td>A coordinate of a MA plot</td>
            </tr>
            <tr>
              <td>m</td>
              <td>FIELD_NAME_M</td>
              <td>m</td>
              <td>M coordinate of a MA plot</td>
            </tr>
          
      </table>
     
    </subsection>
    
    <subsection name="Useful methods for BioAssay objects">
    
      <p>Like commun java classes, BioAssay objects provides usefuls methods:</p>
      
    
      <source>
      b.size();
      </source>
      <p>Get the size (the number of rows) of the BioAssay object.</p>
      
      <source>
      b.clear();
      </source>
      <p>Clear all data from the BioAssay object.</p>
      
      <source>
      b1.equals(b2);
      </source>
      <p>Test if BioAssay b1 and b2 are equals.</p>
      
      <source>
      b.hashCode();
      </source>
      <p>Provides a hashcode for the object. This method and this value are useful for Java Collection (i.e. Vector, Hashtable objects).</p>
      
      
      <source>
      b.iterator();
      </source>
      <p>Returns a SpotIterator Object over the BioAssay Object. For more information see The SpotIterator Section.</p>
        
    </subsection>
    
    <subsection name="Locations in BioAssay Objects">

    
      <p>This section show you how spots location are managed in BioAssay. There are 4 coordinates for a spot location :</p>
      
      <variablelist>
        <varlistentry>
          <term>meta row</term>
          <li><p>Y coordinate of the block of the spot.</p></li>
        </varlistentry>
        <varlistentry>
          <term>meta column</term>
          <li><p>X coordinate of the block of the spot.</p></li>
        </varlistentry>
        <varlistentry>
          <term>row</term>
          <li><p>Y coordinate of the spot in a block.</p></li>
        </varlistentry>
        <varlistentry>
          <term>column</term>
          <li><p>X coordinate of the spot in a block.</p></li>
        </varlistentry>
      </variablelist>      

      
      
      <p>For more efficacy, all coordinates of a spot are encoded in a unique integer field.</p>
      
      <source>
      int location = 55465;
      
      // Get the meta row of a location
      BioAssayUtils.getMetaRow(location);    
      
      // Get the meta column of a location                         
      BioAssayUtils.getMetaColumn(location); 
      
      // Get the row of a location                         
      BioAssayUtils.getRow(location);
                                       
      // Get the column of a location
      BioAssayUtils.getcolumn(location);                              
      
      
      
      // Set the meta row of a location
      location = BioAssayUtils.setMetaRow(location,  metaRow);
      
      // Set the meta column of a location        
      location = BioAssayUtils.setMetaColumn(location,  metaColumn);  
      
      // Set the row of a location
      location = BioAssayUtils.setRow(location,  row);                
      
      // Set the column of a location
      location = BioAssayUtils.setColumn(location,  column);          
      
      
            
      // encode a location for a spot, The same method exists for array of locations
      BioAssayUtils.encodeLocation(metaRow, metaColumn, row, column); 
                                                                     
      </source>
                                                                      
      <p>To set or get locations from a BioAssay object use this methods:</p>
      
      <source>
      
      int [] locations;
      
      b.setLocations(locations);
      locations = b.getLocations();
      
      </source>

      <p>You can also get the index of a spot location with the getIndexFromALocation method:</p>
      
      <source>
      getIndexFromALocation(int location);
      </source>
      
    
    </subsection>

    <subsection name="Handling replicates">
 
    
      <p>In a BioAssay object many spot can have the same, so it's realy slow to get all the spots with the same identifier. BioAssay provides a reference system which store in a hashtable all the spots with the same name. You must enable it before playing with it : </p>
      
      <source>
      b.makeReferences();
      </source>
      
      <p>Usely, the BioAssay.FIELD_NAME_ID is the reference field. However, you can change it:</p>
      
      <source>
      // Set the reference field as the description field
      b.setReferenceField("descriptions"); 
      
      // Get the reference field  
      b.getReferenceField();                 
      </source>
      
      <p>After you can retrieve all the indexes of the spots with the same reference</p>

      <source>
      // Get all the indexes of the spots with "TOTO5" reference
      int [] indexes = b.getIndexesFromAReference("TOTO5");                                                            
      </source>
      
    </subsection> 
    
    <subsection name="Manage annotation">
      <title/>   

      <p>Annotations are optionals data about a BioAssay object data. Annotation works like the Properties object in Java but with BioAssay annotation, the order of the annotation is stored.</p>
      
      <source>
      // Get an annotation
      String manufacturer = b.getAnnotation("manufacturer");    
      
      // Set an annotation   
      b.setAnnotation("manufacturer", "ENS microarray platform");  
      
      // Remove an annotation
      b.removeAnnotation("manufacturer");        
      
      // Get the names of the keys of the annotations                  
      String [] annotationKeys = b.getAnnotationKeys();            
      </source>
      
    </subsection>
    
  </section>

  </body>
  
</document>

<?xml version="1.0" encoding="latin1"?>

<document>

  <properties>
    <title>Nividic Javascript BioAssay module</title>
    <author email="jourdren@biologie.ens.fr">Laurent Jourdren</author>
  </properties>

  <body>
    
    
    
    <section name="Description of the module bioassay.js">
    
    <p>This module contains functions to easly handling BioAssay object in Javascript.</p>
    
    </section>
   
   <section name="Creation functions">

<source>

/*
 * Create an empty BioAssay object.
 * @param name The name of the bioAssay (optional)
 * @return a new bioAssay object
 */
function createBioAssay(name);

</source>

   </section>
   
   <section name="Read functions">
    
<source>

/*
 * Read a bioAssay
 * @param file File(s) to read
 * @param type Type of the file (gpr,idma...)
 * @param allFields Read all the fields or only default fields
 * @return a BioAssay file
 */
function readBioAssay(file, type, allFields, comma);

/**
 * Shortcut to read GPR file(s)
 * @param file File(s) to read
 * @param allField read all fields
 * @return A BioAssay Object
 */
function readGPR(file, allFields);

/**
 * Shortcut to read IDMA file(s)
 * @param file File(s) to read
 * @param comma true if comma is the decimal separator
 * @return A BioAssay Object
 */
function readIDMA(file, comma);

/**
 * Shortcut to read total.summary file(s)
 * @param file File(s) to read
 * @param comma true if comma is the decimal separator
 * @return A BioAssay Object
 */
function readTotalSummary(file, comma);

/**
 * Shortcut to read total.summary file(s)
 * @param file File(s) to read
 * @param comma true if comma is the decimal separator
 * @return A BioAssay Object
 */
function readTotalSummary(file, comma);

/**
 * Shortcut to read undefined type bioassay file(s).
 * @param file File(s) to read
 * @param comma true if comma is the decimal separator
 * @return A BioAssay Object
 */
function readUndefinedBioAssay(file, comma);

</source>

   </section>
   
   <section name="Write functions">

<source>

/*
 * Write a bioAssay
 * @param bioAssay BioAssay to write
 * @param file File(s) to write
 * @param type Type of the file (gpr,idma...)
 * @param allFields Write all the fields or only default fields
 * @return nothing
 */
function writeBioAssay(bioAssay, file, type, allFields);

/**
 * Shortcut to write GPR file
 * @param file File to write
 * @return nothing
 */
function writeGPR(bioAssay, file);

/**
 * Shortcut to write IDMA file
 * @param file File to write
 * @return nothing
 */
function writeIDMA(bioAssay, file);

/**
 * Shortcut to write total.summary file
 * @param file File to write
 * @return nothing
 */
function writeTotalSummary(bioAssay, file);

</source>
    
    </section>
    
    <section name="Write functions">

<source>

/*
 * Get a sorter of bioAssay objects
 * @return the sorter
 */
function createMASorter();

</source>

	</section>

  <section name="BioAssay fieldname">

   <p>This module define also constants for the fields name of BioAssay.</p>

<source>
   
 /** Column name for red data. */
  var FIELD_NAME_RED = "red";
  /** Column name for green data. */
  var FIELD_NAME_GREEN = "green";
  /** Column name for flags data. */
  var FIELD_NAME_FLAG = "flags";
  /** Column name for name data. */
  var FIELD_NAME_ID = "id";
  /** Column name for ratio data. */
  var FIELD_NAME_RATIO = "ratio";
  /** Column name for bright data. */
  var FIELD_NAME_BRIGHT = "bright";
  /** Column name for description data. */
  var FIELD_NAME_DESCRIPTION = "description";
  /** Column name for a coordinate of a MA plot. */
  var FIELD_NAME_A = "a";
  /** Column name for m coordinate of a MA plot. */
  var FIELD_NAME_M = "m";
  /** Column name for the standard deviation of a values. */
  var FIELD_NAME_STD_DEV_A = "stddeva";
  /** Column name for the standard deviation of m values. */
  var FIELD_NAME_STD_DEV_M = "stddevm";
  
</source>

	</section>

<section name="Flags constants">

	<p>This module define also constants for the flags of BioAssay.</p>

<source>

  /** Flag bad. */
  var FLAG_BAD = -100;
  /** Flag abscent. */
  var FLAG_ABSCENT = -75;
  /** Flag not found. */
  var FLAG_NOT_FOUND = -50;
  /** Flag unflagged. */
  var FLAG_UNFLAGGED = 0;
  /** Flag normalized. */
  var FLAG_NORMALIZED = 1;
  /** Flag good. */
  var FLAG_GOOD = 100;
    
 </source>
    
    </section>
    
    <section name="Filters">

	

<source>
    
/*
 * Create a filter on values greater or equals to the parameter
 * @param threshold
 */
function createMSupFilter(threshold)

/*
 * Create a filter on values greater or equals to the parameter
 * @param threshold
 */
function createMInfFilter(threshold)

</source>

    </section>
    
    
  </body>
</document>